*******Problem Statement********
********Daily Temperatures******

Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.

 

Example 1:

Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]
Example 2:

Input: temperatures = [30,40,50,60]
Output: [1,1,1,0]
Example 3:

Input: temperatures = [30,60,90]
Output: [1,1,0]
 

Constraints:

1 <= temperatures.length <= 105
30 <= temperatures[i] <= 100


*******Code**********

class Pair{
    int x;
    int y;

    Pair(int x, int y){
        this.x = x;
        this.y = y;
    }
}
class Solution {
    public int[] dailyTemperatures(int[] arr) {
        //Approach 1: TC:O(n^2) SC:O(n)
        int n = arr.length;
        int ans[] = new int[n];
        // for(int i = 0; i < n; i++){
        //     int day = 1;
        //     for(int j = i + 1; j < n; j++){
        //         if(arr[j] <= arr[i]){
        //             day++;
        //         }else if(arr[j] > arr[i]){
        //             break;
        //         }
        //         if(j == n-1){
        //             day = 0;
        //         }
        //     } 
        //     if(i == n-1){
        //         day = 0;
        //     }  
        //     ans[i] = day; 
        // }
        // return ans;

        //Approach 2: TC:O(n * 2) into bcs we are performing push and pop for st only once in while loop SC:O(n)
        // Stack<Pair> st = new Stack<Pair>();

        // for(int i = n-1; i >= 0; i--){
        //     int day = 1;
        //     if(st.isEmpty()){
        //         ans[i] = 0;
        //     }else{
        //         while(!st.isEmpty() && st.peek().x <= arr[i]){
        //             day = day + st.peek().y;
        //             st.pop();
        //         }
        //         ans[i] = st.isEmpty() ? 0 : day;
        //     }
            
        //     st.push(new Pair(arr[i], day));
        // }

        // return ans;

        //Approach 2: TC:O(n) SC:O(n)
        Stack<Integer> st = new Stack<>();

        for(int i = n-1; i >= 0; i--){
            while(!st.isEmpty() && arr[st.peek()]<= arr[i]){
                st.pop();
            }
            ans[i] = st.isEmpty() ? 0 : st.peek() - i;
            
            st.push(i);
        }

        return ans;


    }
}