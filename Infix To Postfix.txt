******Problem Statement*********
*****Infix To Postfix*******

Problem statement
You are given a string 'exp' which is a valid infix expression.



Convert the given infix expression to postfix expression.



Note:
Infix notation is a method of writing mathematical expressions in which operators are placed between operands. 

For example, "3 + 4" represents the addition of 3 and 4.

Postfix notation is a method of writing mathematical expressions in which operators are placed after the operands. 

For example, "3 4 +" represents the addition of 3 and 4.

Expression contains digits, lower case English letters, ‘(’, ‘)’, ‘+’, ‘-’, ‘*’, ‘/’, ‘^’. 


Example:
Input: exp = ‘3+4*8’

Output: 348*+

Explanation:
Here multiplication is performed first and then the addition operation. Hence postfix expression is  3 4 8 * +.


Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
3^(1+1)

Expected Answer:
311+^


Output printed on console:
311+^


Explanation of Sample Input 1:
For this testcase, we will evaluate 'b' = (1+1) first. 

Hence it's equivalent postfix expression will be "11+". 

Next we will evaluate 3^b. It's equivalent postfix expression will be "3b^". 

Replacing 'b' with it's equivalent postfix we get "311+^".


Sample Input 2:
a+b+c+d-e


Expected Answer:
ab+c+d+e-


Output printed on console:
ab+c+d+e-


Expected Time Complexity:
Try to do this in O(n).


Constraints:
1 <= 'n' <= 5000 

‘n’, is the length of EXP
The expression contains digits, lower case English letters, ‘(’, ‘)’, ‘+’, ‘-’, ‘*’, ‘/’, ‘^’. 

Time Limit: 1 sec

*******Code*********


import java.util.Stack;

public class Solution {
    public static int prec(char c){
        if(c == '^'){
            return 3;
        }else if(c == '*' || c == '/'){
            return 2;
        }else if(c == '+' || c == '-'){
            return 1;
        }else{
            return -1;
        }
    }
    public static String infixToPostfix(String exp) {
        // Write your code here
        String res = "";
        Stack<Character> st = new Stack<>();

            for(int i = 0; i < exp.length(); i++){
                char c = exp.charAt(i);

                if(Character.isLetterOrDigit(c)){
                    res += c;
                }else if(c == '('){
                    st.add(c);
                }else if(c == ')'){
                    while(!st.isEmpty() && st.peek() != '('){
                        res += st.peek();
                        st.pop();
                    }
                    st.pop();
                }else {
                        while(!st.isEmpty() &&  prec(c) <= prec(st.peek())){
                    res += st.peek();
                    st.pop();
                        }
                    st.add(c);
                }
                
            }

            while(!st.isEmpty()){
                if(st.peek() == '(') {
                    st.pop();
                    continue;
                }
                res += st.pop();
            }

            return res;
        }


}