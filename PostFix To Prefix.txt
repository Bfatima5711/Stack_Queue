********Problem Statement**********

*****PostFix To Prefix******

Problem statement
You are given a string denoting a valid Postfix expression containing ‘+’, ’-’, ’*’, ‘/’ and lowercase letters.



Convert the given Postfix expression into a Prefix expression.



Note:
Postfix notation is a method of writing mathematical expressions in which operators are placed after the operands. For example, "a b +" represents the addition of a and b.

Prefix notation is a method of writing mathematical expressions in which operators are placed before the operands. For example, "+ a b" represents the addition of a and b.

Expression contains lowercase English letters, ‘+’, ‘-’, ‘*’, and  ‘/’. 


Example:
Input: abc*+

Output: +a*bc

Explanation:
For the given postfix expression, infix expression is a+b*c. And it's corresponding prefix expression is +a*bc.

Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
ab+cd-*


Expected Answer:
*+ab-cd 


Output on console:
*+ab-cd 


Explanation Of Sample Input 1:
For this testcase, the infix expression will be (a + b) * (c - d). Hence, our prefix expression will be *+ab-cd.


Sample Input 2:
ab+c-


Expected Answer:
-+abc


Output on console:
-+abc


Expected Time Complexity:
Try to solve this in O(n), where n is the length of expression.    


Constraints:
1 <= |s| <= 10^5

Time Limit: 1 sec

*******Code*******

import java.util.*;
public class Solution {
    public static boolean isOperator(char c){
        if(c == '^' || c == '+' || c == '-' || c == '*' || c == '/' ){
            return true;
        }
        return false;
    }
    public static String postfixToPrefix(String s) {
        
        //follow order while inserting an el into the stack  operator + operant 2 + operand 1

        Stack<String> st = new Stack<>();

        for(int i = 0; i < s.length(); i++){
            char c = s.charAt(i);

            if(Character.isLetterOrDigit(c)){
                st.push(c+"");
            }else if(isOperator(c)){
                if(!st.isEmpty() && st.size() >= 2){
                    String first = st.pop();
                    String second = st.pop();
                    String res = (c + second + first );
                    st.push(res);
                }
            }
        }
        String ans = st.pop();
        return ans;
    }
}

    
   