******Problem Statement*****

***Min Stack********
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the MinStack class:

MinStack() initializes the stack object.
void push(int val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.
You must implement a solution with O(1) time complexity for each function.

 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2
 

Constraints:

-231 <= val <= 231 - 1
Methods pop, top and getMin operations will always be called on non-empty stacks.
At most 3 * 104 calls will be made to push, pop, top, and getMin.

******Code********

 class Pair{
        int x;
        int y;
        Pair(int x, int y){
            this.x = x;
            this.y = y;
    }
}

// class MinStack {
//     //Approach 1: TC:O(1) for fun SC:O(2n) bcs we are storing pair so 2n bcs n is total el in stack
//     Stack<Pair> st;

//     public MinStack() {
//         st = new Stack<Pair>();
//     }
    
//     public void push(int val) {
//         int min;

//         if(st.isEmpty()){
//             min = val;
//         }else{
//             min = Math.min(st.peek().y, val);
//         }

//         st.push(new Pair(val, min));
//     }
    
//     public void pop() {
//         if(!st.isEmpty()){
//             st.pop();
//         }
//     }
    
//     public int top() {
//         return st.peek().x;
//     }
    
//     public int getMin() {
//         return st.peek().y;
//     }
// }

class MinStack {
    //Approach 1: TC:O(1) for fun SC:O(n) bcs we are storing n el in stack
    Stack<Long> st;
    long min;

    public MinStack() {
       st = new Stack<Long>();
       this.min = Long.MAX_VALUE;
    }
    
    public void push(int value) {
        long val = Long.valueOf(value);
        if(st.isEmpty()){
            min = val;
            st.push(val);
        }else{
            if(val < min){
                st.push((2 * val) - min);
                min = val;
                
            }else{
                st.push(val);
            }
        }
    }
    
    public void pop() {
        if(st.isEmpty()) return;
        Long val = st.pop();
        if(val < min){
            min = (2 * min - val);
        }
    }
    
    public int top() {
        if(st.isEmpty()) return -1;
        Long val = st.peek();
        if(val < min){;
            return (int)min;
        }else{
            return val.intValue();
        }
    }
    
    public int getMin() {
        return (int)min;
    }
}


/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */